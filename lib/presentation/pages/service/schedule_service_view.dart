import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_delivery_app/core/constants/colors.dart';
import 'package:flutter_delivery_app/core/router/app_router.dart';
import 'package:flutter_delivery_app/data/models/schedule/schedule_model.dart';
import 'package:flutter_delivery_app/domain/entities/service/service.dart';
import 'package:flutter_delivery_app/presentation/blocs/delivery/delivery_info_fetch/delivery_info_fetch_cubit.dart';
import 'package:flutter_delivery_app/presentation/blocs/home/navbar_cubit.dart';
import 'package:flutter_delivery_app/presentation/blocs/schedule/schedule_bloc.dart';
import 'package:flutter_delivery_app/presentation/blocs/user/user_bloc.dart';
import 'package:flutter_delivery_app/presentation/widgets/input_form_button.dart';
import 'package:flutter_delivery_app/presentation/widgets/loading_overlay.dart';
import 'package:intl/intl.dart';
import 'package:shimmer/shimmer.dart';
import 'package:toastification/toastification.dart';

class ScheduleServiceView extends StatefulWidget {
  final Service service;

  const ScheduleServiceView({super.key, required this.service});

  @override
  State<ScheduleServiceView> createState() => _ScheduleServiceViewState();
}

class _ScheduleServiceViewState extends State<ScheduleServiceView> {
  DateTime? selectedDate;
  TimeOfDay? selectedTime;

  Future<void> pickDate() async {
    final picked = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 30)),
      builder: (context, child) {
        return Theme(
          data: ThemeData(
            colorScheme: ColorScheme.light(
              primary: kSecondaryColor, // Header background & OK button
              onPrimary: kBackgroundColor, // Header text color
              onSurface: Colors.brown, // Body text color
            ),
          ),
          child: child!,
        );
      },
    );
    if (picked != null) {
      setState(() => selectedDate = picked);
    }
  }

  Future<void> pickTime() async {
    final picked = await showTimePicker(
      context: context,
      initialTime: TimeOfDay.now(),
      builder: (context, child) {
        return Theme(
          data: ThemeData(
            colorScheme: ColorScheme.light(
              primary: kSecondaryColor, // Header background & OK button
              onPrimary: kBackgroundColor, // Header text color
              onSurface: Colors.brown, // Body text color
            ),
          ),
          child: child!,
        );
      },
    );
    if (picked != null) {
      setState(() => selectedTime = picked);
    }
  }

  @override
  void initState() {
    super.initState();
    context.read<UserBloc>().add(CheckUserEvent());
  }

  void _bookDelivery() {
    // Check if user is logged in
    final userState = context.read<UserBloc>().state;
    if (userState is! UserLogged) {
      // ✅ Show toast
      toastification.show(
        context: context,
        title: Text("Schedule Failed"),
        description: Text("Please sign in to book delivery"),
        type: ToastificationType.error,
        style: ToastificationStyle.minimal,
        autoCloseDuration: const Duration(seconds: 5),
        dragToClose: true,
      );
      return;
    }

    // Check if delivery info is selected
    final deliveryState = context.read<DeliveryInfoFetchCubit>().state;
    if (deliveryState is! DeliveryInfoFetchSuccess ||
        deliveryState.selectedDeliveryInformation == null) {
      // ✅ Show toast
      toastification.show(
        context: context,
        title: Text("Schedule Failed"),
        description: Text("Please select delivery information"),
        type: ToastificationType.error,
        style: ToastificationStyle.minimal,
        autoCloseDuration: const Duration(seconds: 5),
        dragToClose: true,
      );
      return;
    }

    // Check if date and time are selected
    if (selectedDate == null || selectedTime == null) {
      // ✅ Show toast
      toastification.show(
        context: context,
        title: Text("Schedule Failed"),
        description: Text("Please select date and time"),
        type: ToastificationType.error,
        style: ToastificationStyle.minimal,
        autoCloseDuration: const Duration(seconds: 5),
        dragToClose: true,
      );
      return;
    }

    // Create schedule parameters
    final params = ScheduleModel(
      id: '', // Will be generated by server
      userId: userState.user.id,
      serviceId: widget.service.id,
      deliveryInfoId: deliveryState.selectedDeliveryInformation!.id,
      scheduleDate: selectedDate!,
      scheduleTime: selectedTime!.format(context),
      status: 'Pending', // Initial status
    );

    // Dispatch the book event
    context.read<ScheduleBloc>().add(BookScheduleEvent(params));
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<ScheduleBloc, ScheduleState>(
      listener: (context, state) {
        if (state is ScheduleLoading) {
          LoadingOverlay.show();
        } else {
          LoadingOverlay.hide();
        }

        if (state is ScheduleAddSuccess) {
          context.read<NavbarCubit>().update(2);
          // ✅ Show toast
          toastification.show(
            context: context,
            title: Text("Schedule Success"),
            description: Text("Delivery booked successfully!"),
            type: ToastificationType.success,
            style: ToastificationStyle.minimal,
            autoCloseDuration: const Duration(seconds: 10),
            dragToClose: true,
          );
        } else if (state is ScheduleFailure) {
          // ✅ Show toast
          toastification.show(
            context: context,
            title: Text("Schedule Failed"),
            description: Text("Failed to book delivery"),
            type: ToastificationType.error,
            style: ToastificationStyle.minimal,
            autoCloseDuration: const Duration(seconds: 10),
            dragToClose: true,
          );
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Schedule Delivery'),
          backgroundColor: kBackgroundColor,
          leading: IconButton(
            icon: const Icon(Icons.arrow_back),
            onPressed: () => Navigator.pop(context),
          ),
        ),
        backgroundColor: kBackgroundColor,
        body: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // ✅ Service Details
              _buildServiceDetails(),

              const SizedBox(height: 20),

              // ✅ User Check and Delivery Info
              BlocBuilder<UserBloc, UserState>(
                builder: (context, userState) {
                  if (userState is UserLogged) {
                    // ✅ Show delivery info if user is logged in
                    return _buildDeliveryInfoSection();
                  } else if (userState is UserLoading) {
                    return const Center(child: CircularProgressIndicator());
                  } else {
                    // ❌ User is not logged in
                    return Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'You must be signed in to select delivery information.',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w500,
                            color: Colors.redAccent,
                          ),
                        ),
                        const SizedBox(height: 12),
                        ElevatedButton.icon(
                          onPressed: () {
                            Navigator.of(context).pushNamed(AppRouter.login);
                          },
                          icon: const Icon(Icons.login, color: Colors.red),
                          label: const Text(
                            "Sign In to Continue",
                            style: TextStyle(color: Colors.red),
                          ),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.grey.shade400,
                            padding: const EdgeInsets.symmetric(
                              horizontal: 24,
                              vertical: 14,
                            ),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(30),
                            ),
                            elevation: 4,
                            shadowColor: Colors.black26,
                          ),
                        ),
                      ],
                    );
                  }
                },
              ),

              const SizedBox(height: 20),

              // ✅ Schedule Date
              const Text(
                'Select Delivery Date',
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
              ),
              const SizedBox(height: 8),
              _buildDatePicker(),

              const SizedBox(height: 20),

              // ✅ Schedule Time
              const Text(
                'Select Time Slot',
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
              ),
              const SizedBox(height: 8),
              _buildTimePicker(),

              const SizedBox(height: 30),
            ],
          ),
        ),
        bottomNavigationBar: Padding(
          padding: const EdgeInsets.all(16),
          child: SizedBox(
            width: double.infinity,
            child: InputFormButton(
              onClick: _bookDelivery,
              titleText: 'Book Delivery',
              icon: const Icon(
                Icons.schedule_send,
                color: Colors.white,
                size: 20,
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildServiceDetails() {
    return Row(
      children: [
        ClipRRect(
          borderRadius: BorderRadius.circular(8),
          child: CachedNetworkImage(
            imageUrl: widget.service.imageUrl,
            height: 70,
            width: 70,
            fit: BoxFit.cover,
            placeholder: (context, url) => Shimmer.fromColors(
              baseColor: Colors.grey.shade100,
              highlightColor: Colors.white,
              child: Container(color: Colors.grey.shade300),
            ),
            errorWidget: (context, url, error) =>
                const Center(child: Icon(Icons.error)),
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                widget.service.name,
                style: const TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 4),
              Text(
                widget.service.subName,
                style: const TextStyle(fontSize: 18, color: Colors.brown),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildDeliveryInfoSection() {
    return BlocBuilder<DeliveryInfoFetchCubit, DeliveryInfoFetchState>(
      builder: (context, state) {
        if (state is DeliveryInfoFetchLoading) {
          LoadingOverlay.show();
        } else {
          LoadingOverlay.hide();
        }

        if (state is DeliveryInfoFetchSuccess) {
          final selectedDeliveryInfo = state.selectedDeliveryInformation;

          if (selectedDeliveryInfo == null) {
            return GestureDetector(
              onTap: () {
                Navigator.of(context).pushNamed(AppRouter.deliveryInfo);
              },
              child: Container(
                width: double.infinity,
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.grey.shade300,
                  borderRadius: BorderRadius.circular(10),
                ),
                child: Row(
                  children: const [
                    Icon(Icons.edit_location_outlined, color: Colors.grey),
                    SizedBox(width: 8),
                    Text(
                      'Select Delivery Information',
                      style: TextStyle(
                        color: Colors.grey,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ],
                ),
              ),
            );
          } else {
            return GestureDetector(
              onTap: () {
                Navigator.of(context).pushNamed(AppRouter.deliveryInfo);
              },
              child: Container(
                width: double.infinity,
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.brown.shade50,
                  borderRadius: BorderRadius.circular(10),
                  border: Border.all(color: Colors.brown.shade300),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('Address: ${selectedDeliveryInfo.address}'),
                    Text('City: ${selectedDeliveryInfo.city}'),
                    Text('Contact: ${selectedDeliveryInfo.contactNumber}'),
                    const SizedBox(height: 6),
                    const Text(
                      'Change Address',
                      style: TextStyle(
                        color: Colors.blue,
                        fontSize: 13,
                        fontWeight: FontWeight.w500,
                        decoration: TextDecoration.underline,
                      ),
                    ),
                  ],
                ),
              ),
            );
          }
        } else {
          return const Text(
            'Failed to load delivery info',
            style: TextStyle(color: Colors.red),
          );
        }
      },
    );
  }

  Widget _buildDatePicker() {
    return GestureDetector(
      onTap: pickDate,
      child: Container(
        width: double.infinity,
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          border: Border.all(color: Colors.brown),
          borderRadius: BorderRadius.circular(10),
        ),
        child: Text(
          selectedDate != null
              ? DateFormat.yMMMMd().format(selectedDate!)
              : 'Choose a date',
          style: TextStyle(
            color: selectedDate != null ? Colors.black87 : Colors.grey,
          ),
        ),
      ),
    );
  }

  Widget _buildTimePicker() {
    return GestureDetector(
      onTap: pickTime,
      child: Container(
        width: double.infinity,
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          border: Border.all(color: Colors.brown),
          borderRadius: BorderRadius.circular(10),
        ),
        child: Text(
          selectedTime != null ? selectedTime!.format(context) : 'Choose time',
          style: TextStyle(
            color: selectedTime != null ? Colors.black87 : Colors.grey,
          ),
        ),
      ),
    );
  }
}
